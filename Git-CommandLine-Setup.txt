Cum sa iti setezi username-ul si parola de la contul de github in git command line

	git config --global user.name "Nume Cont"
	git config --global user.email "email"

1) Initializing 
To initialize a empty Git repository :
	git init "name repository"

2) Checking the status
Check the status to see what the current state of our project is:
	git status

3) Adding Changes
To add a file to the staging area :
	git add "nume-fisier.txt"

4) Committing 
The files listed here are in the staging area, and they are not in our repository yet. We could add or remove files from the stage before we store them in the repository
-> To store our staged changes we run the commit command with a message describing what we've changed :
	git commit -m "Add cute python file"

5) Adding All Changes
You can use wildcards if you want to add many files of the same type :
	git add '*.txt'

6) Committing All Changes
	git commit -m "Add all the txt files"

7) History
Think of Git's log as a journal that remembers all the changes. To see them run :
	git log

8) Remote Repositories
 To push our local repo to the GitHub server we'll need to add a remote repository :
 	git remote add origin "nume-link-repository"
 	git remote -v (afiseaza toate remote-urile)
 	git remote rm "numeRemote" (sterge remote)

9) Pushing Remotely
So let's push our local changes to our origin repo (on GitHub) :
The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do :
	git push -u origin master

10) Pulling Remotely
We can check for changes on our GitHub repository and pull down any new changes by running :
	git pull origin master

11) Differences
Let's take a look at what is different from our last commit by using the git diff command. In this case we want the diff of our most recent commit, which we can refer to using the HEAD pointer : 
	git diff HEAD

12) Staged Differences (cont'd)
Good, now go ahead and run git diff with the --staged option to see the changes you just staged. You should see that octodog.txt was created.
	git diff --staged

13) Resetting the Stage
You can unstage files by using the git reset command : 
	git reset octofamily/octodog.txt

14) Undo
Files can be changed back to how they were at the last commit by using the command: git checkout -- <target> : 
	git checkout -- octocat.txt

15) Branching Out
Let's create a branch called clean_up, where we'll do all the work :
	git branch "nume-branch"

16) Switching Branches
You can switch branches using the git checkout <branch> command :
	git checkout "branch-name"

17) Removing All The Things
You can finally remove all the file by using the git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us :
	git rm '*.txt'

18) Commiting Branch Changes
Feel free to run git status to check the changes you're about to commit : 
	git commit -m "Remove all the cats"

19) Preparing to Merge
We're already on the master branch, so we just need to tell Git to merge the clean_up branch into it :
	git merge clean_up

20) Keeping Things Clean
You can use git branch -d <branch name> to delete a branch :
	git branch -d "branch-name"

21) The Final Push
All that's left for you to do now is to push everything you've been working on to your remote repository, and you're done : 
	git push

